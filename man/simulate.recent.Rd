% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-generator-old.R, R/data-generator.R
\name{simulate.recent}
\alias{simulate.recent}
\title{Simulate recency indicators based on the data, true phi function,
and the infection incidence function.}
\usage{
\method{simulate}{recent}(
  sim_data,
  infection.function = NULL,
  phi.func,
  baseline_incidence,
  prevalence,
  rho,
  summarize = TRUE,
  incidence.function = NULL,
  ptest.dist = NULL,
  ptest.prob = 1,
  t_range = NULL,
  t_noise = NULL,
  d_misrep = 0,
  q_misrep = 0,
  p_misrep = 0,
  bigT = NULL,
  ptest.dist2 = NULL,
  exclude_pt_bigT = FALSE
)

\method{simulate}{recent}(
  sim_data,
  infection.function = NULL,
  phi.func,
  baseline_incidence,
  prevalence,
  rho,
  summarize = TRUE,
  incidence.function = NULL,
  ptest.dist = NULL,
  ptest.prob = 1,
  t_range = NULL,
  t_noise = NULL,
  d_misrep = 0,
  q_misrep = 0,
  p_misrep = 0,
  bigT = NULL,
  ptest.dist2 = NULL,
  exclude_pt_bigT = FALSE
)
}
\arguments{
\item{sim_data}{Outputs from the `generate.raw.data` function}

\item{infection.function}{Function that simulates the infection time}

\item{phi.func}{Test positive function for recency assay}

\item{baseline_incidence}{Baseline incidence value (time 0)}

\item{prevalence}{Constant prevalence value}

\item{rho}{A parameter to the `infection.function` for how quickly incidence changes}

\item{incidence.function}{An incidence function in place of `infection.function`.
Cannot pass both arguments.}

\item{ptest.dist}{A prior test result distribution function, which must have
be a function of a scalar `n` and vector `u` which is a vector
of infection durations (which will be of length n),
though it can ignore the `u` argument inside the function.
An example is `rnorm(n, mean=u)`.}

\item{ptest.prob}{Probability of prior test result being available.
Can instead be a function of `u`, the infection duration.}

\item{t_noise}{Function to add noise to a single prior testing time.
Must be a function of t, the prior testing time.}

\item{d_misrep}{Probability of given a positive prior test, individual
reports negative prior test.}

\item{q_misrep}{Probability of not reporting a prior test result.}

\item{...}{Additional arguments to the `simulate.infection.times` function if you're
passing an `incidence.function` instead of an `infection.function`.}
}
\description{
Also possibly simulate prior test results.

Also possibly simulate prior test results.
}
\examples{
dat <- generate.raw.data(n_sims=10, n=100, prevalence=0.5, times=c(0, 0))
sim <- simulate.recent(sim_data=dat, infection.function=infections.con,
                       baseline_incidence=0.05, prevalence=0.5, rho=NA,
                       phi.func=function(t) 1 - pgamma(t, 1, 2),
                       times=c(0, 1), summarize=FALSE,
                       ptest.dist=function(n) runif(n, 0.0, 5.0),
                       ptest.prob=0.5, bigT=2)
sim <- simulate.recent(sim_data=dat, infection.function=infections.con,
                       baseline_incidence=0.05, prevalence=0.5, rho=NA,
                       phi.func=function(t) 1 - pgamma(t, 1, 2),
                       times=c(0, 1), summarize=TRUE,
                       ptest.dist=function(n) runif(n, 0.0, 5.0),
                       ptest.prob=0.5, bigT=2)
dat <- generate.raw.data(n_sims=10, n=100, prevalence=0.5, times=c(0))
sim <- simulate.recent(sim_data=dat, infection.function=infections.con,
                       baseline_incidence=0.05, prevalence=0.5, rho=NA,
                       phi.func=function(t) 1 - pgamma(t, 1, 2),
                       summarize=TRUE,
                       ptest.dist=function(n) runif(n, 0.0, 5.0),
                       ptest.prob=0.5, bigT=2)
dat <- generate.raw.data(n_sims=10, n=100, prevalence=0.5, times=c(0, 0))
sim <- simulate.recent(sim_data=dat, infection.function=infections.con,
                       baseline_incidence=0.05, prevalence=0.5, rho=NA,
                       phi.func=function(t) 1 - pgamma(t, 1, 2),
                       times=c(0, 1), summarize=TRUE,
                       ptest.dist=function(n, u) runif(n, 0.4, 1.0),
                       ptest.prob=1.0, bigT=2,
                       t_range=c(0.4, 1.0))
sim <- simulate.recent(sim_data=dat, infection.function=infections.con,
                       baseline_incidence=0.05, prevalence=0.5, rho=NA,
                       phi.func=function(t) 1 - pgamma(t, 1, 2),
                       times=c(0, 1), summarize=TRUE,
                       ptest.dist=function(n) runif(n, 0.0, 5.0),
                       ptest.prob=0.5, bigT=2)
dat <- generate.raw.data(n_sims=10, n=100, prevalence=0.5, times=c(0))
sim <- simulate.recent(sim_data=dat, infection.function=infections.con,
                       baseline_incidence=0.05, prevalence=0.5, rho=NA,
                       phi.func=function(t) 1 - pgamma(t, 1, 2),
                       summarize=TRUE,
                       ptest.dist=function(n) runif(n, 0.0, 5.0),
                       ptest.prob=0.5, bigT=2)
}
