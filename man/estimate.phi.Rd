% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-summary.R
\name{estimate.phi}
\alias{estimate.phi}
\title{Estimate a phi function, and output omega}
\usage{
estimate.phi(
  phidat,
  maxT,
  bigT,
  dt = 1/365.25,
  min_dt = FALSE,
  formula,
  family,
  use_geese,
  return_all = FALSE,
  plot_phi = FALSE,
  ...
)
}
\arguments{
\item{phidat}{Data frame used to estimate the phi function, needs to have
columns ri (recency indicator), ui (duration), and id (if use_geese == TRUE)}

\item{maxT}{Maximum time to estimate phi until}

\item{bigT}{T^\* for estimating \Omega_{T^\*}}

\item{dt}{An integration step size. Should be no more than 1 day.}

\item{min_dt}{Make the minimum time dt (necessary if doing a log transformation of ui)}

\item{formula}{Formula for fitting the model to phidat.
Formula argument must take in only ui as the newdata.
For example, do not create a ui^2 variable. Use poly(ui, ...) function
to fit polynomial terms.}

\item{family}{Family argument for glm or gee}

\item{use_geese}{Indicator to fit a gee model using geese(), or a glm model with glm()}

\item{return_all}{Whether to return additional objects used in internal functions (will use more memory)}

\item{plot_phi}{Whether or not to plot the estimated phi function}

\item{...}{Additional arguments to glm or geese for fitting model}
}
\value{
List of results:
* `omega`: Estimate of \Omega_{T^\*}
* `omega_var`: Variance of \hat{\Omega_{T^\*}}
* `bigTidx`: Index of T^\* based on `ts_index`
* `ts_index`: Index mapping each time point to an integer
* `get.integral.est`: Function to give an estimate of \Omega_{T} for some T as arg to the function
}
\description{
Estimate a phi function, and output omega
}
\examples{
# Define phi function
params <- get.gamma.params(window=248/365.25, shadow=306/365.25)
phi.func <- function(t) 1-pgamma(t, shape = params[1], rate = params[2])

# Simulate external study data
study <- simulate_studies(1, phi.func)[[1]]
setnames(study, c("id", "ui", "ri"))

# Estimate omega based on 3rd degree polynomial
estimate.phi(phidat=study, maxT=5, bigT=1,
             formula="ri ~ poly(ui, raw=T, degree=4)", family=binomial(link="logit"),
             use_geese=TRUE, plot_phi=TRUE)

# Estimate omega based on 3rd degree polynomial, log function
# NOTE: If you do this, need to not have any ui = 0
study.log <- study
study.log[study.log$ui == 0, "ui"] <- 0.01
estimate.phi(phidat=study.log, maxT=10, bigT=1, min_dt=TRUE,
             formula="ri ~ poly(log(ui), raw=T, degree=4)", family=binomial(link="logit"),
             use_geese=TRUE, plot_phi=TRUE)

# Return additional function that can be used to
# quickly get other omega estimates
result <- estimate.phi(phidat=study, maxT=5, bigT=1,
                       formula="ri ~ poly(ui, raw=T, degree=3)", family=binomial(link="logit"),
                       use_geese=TRUE, plot_phi=FALSE, return_all=TRUE)

# What is \int_0^T \phi(t) dt for ts=T?
result$get.integral.est(ts=2.1)
}
